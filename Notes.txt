- Regular Expressions (Now you have two problems)
    - I like the idea of going through the existing linqpad "slides" for the beginning of the talk. The part where I talk about Friedl's book, show the "magic" gif, "one thing" (formerly "two things"), etc.
    
- Do the opening linqpad slides, ending with "One Thing". (tweaking as necessary)

- One Thing
    - A regular expression is a tree structure.
    - Consists of a parent node with one or more child nodes.

    - If you speak OOO, the node interface looks something like this:
        public interface IRegexNode
        {
            IParseResult Parse(string inputText, int index);
        }
        
        Where IParseResult looks something like this:
        
        public interface IParseResult
        {
            public bool Success { get; }
            public int Length { get; }
        }

- Nodes fall in one of three categories:
    - No children.
    - One or more children.
    - Exactly one child.
    
- The simplest possible example consists of two nodes: one container node (one-to-many children) and one leaf node (no children).

    - The first leaf node: Character Literal
        - The Parse method checks to see if the character at the specified index has the same value as the node.
        - LINQPad Demo: live code a simple version of this node.
        - Case-sensitive by default, can be case-insensitive.
        - LINQPad Demo: add case-insensitive option.

    - The first container node: Regex
        - There is always exactly one.
        - Talk about container behaviour.
        - All children must match successfully in sequence.
        - LINQPad demo: live code a simple version of this node.
            public IParseResult Parse(string inputText, int index)
            {
                var childIndex = index;
            
                foreach (var child in this.Children)
                {
                    var childResult = child.Parse(inputText, childIndex);
                    
                    if (!childResult.Success)
                    {
                        return ParseResult.Fail;
                    }
                    
                    childIndex += childResult.Length;
                }
                
                return ParseResult.Success(index, index - childIndex);
            }

- Leaf Nodes: Single Character Matchers
    - Character class
    - Negated character class
    - Dot
    - Shorthands
        - \d, \D, \s, \S, \w, \W

- Alternation Node
    - Two or more child nodes.
    - Picks the first one that matches the input text at the given index.

- Container Nodes
    - All container nodes behave like the top-level Regex node, with minor variations.
    - Two of three flavors:
        - Non-capturing
        - Capturing
            - Same as non-capturing but remembers the value that matched and makes it available later.
            - Leaf Node: Backreference
                - Works with capturing parenthesis.
                - \1, \2, etc.
            - Depending on your language, the capture values may be available after regex evaluation.
            - LINQPad example: access capture groups from regex Match.

- Quantifiers
    - Has exactly one child node.
    - Answers the question: has my child node successfully matched a valid number of times?
    - LINQPad Demo: live code a simple version of this node.
        public IParseResult Parse(string inputText, int index)
        {
            ParseResult childResult;
            var childIndex = index;
            int matchCount = 0;
            
            do
            {
                childResult = Child.Parse(inputText, childIndex);
                
                if (childResult.Success)
                {
                    matchCount++;
                    childIndex += childResult.Length;
                }
            } while (childResult.Success && matchCount <= _maxMatchCount);
            
            if (matchCount >= _minMatchCount && matchCount <= _maxMatchCount)
            {
                return ParseResult.Success(index, childin - index);
            }
            
            return ParseResult.Fail;
        }
    - Greedy vs. Lazy
    - LINQPad Demo: modify greedy quantifier (change the while condition to look at _minMatchCount instead of _maxMatchCount)
        while (childResult.Success && matchCount <= _minMatchCount);